--Task – Select all records from the Employee table.
SELECT * FROM Employee;
--Task – Select all records from the Employee table where last name is King.
SELECT * FROM Employee
WHERE LastName = 'King';
--Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT * FROM Employee 
WHERE FirstName = 'Andrew' AND REPORTSTO = IS NULL;
--2.2 ORDER BY
--Task – Select all albums in Album table and sort result set in descending order by title.
SELECT * FROM ALBUM ORDER BY title DESC;
--Task – Select first name from Customer and sort result set in ascending order by city
SELECT FirstName FROM Customer
ORDER BY City;
--2.3 INSERT INTO
--Task – Insert two new records into Genre table
INSERT INTO genre (Genreid, name) VALUES (26, 'One new Genre')
INSERT INTO genre (genreid, name) VALUES (27, 'Another new Genre');

Task – Insert two new records into Employee table
INSERT INTO employee (Employeeid, Lastname, Firstname, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (9 , Fajardo, Nicolas, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO employee (Employeeid, Lastname, Firstname, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (10, Bernstein, Roger, null, null, null, null, null, null, null, null, null, null, null, null);

Task – Insert two new records into Customer table
ISERT INTO customer (CustomerId, LastName, FirstName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES(40, Hammerstein, Phill, null, null, null, null, null, null, null, null, null, null, null );
ISERT INTO customer (CustomerId, LastName, FirstName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES(41, Rogers, Bob, null, null, null, null, null, null, null, null, null, null, null);

2.4 UPDATE
Task – Update Aaron Mitchell in Customer table to Robert Walter
UPDATE customer 
SET LastName = 'Walter', 
FirstName='Robert'
WHERE LastName = 'Mitchell'
AND FirstName= 'Aaron';
Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
UPDATE Artist
SET Name = 'CCR'
WHERE Name = 'Creedence Clearwater Revival';
2.5 LIKE
Task – Select all invoices with a billing address like “T%”
SELECT * FROM invoice WHERE billingaddress LIKE 'T%';

2.6 BETWEEN
Task – Select all invoices that have a total between 15 and 50
SELECT * FROM invoice WHERE total BETWEEN 15 AND 50;
Task – Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT * FROM employee WHERE hiredate BETWEEN TO_DATE ('2003/06/01', 'yyyy/mm/dd') AND TO_DATE ('2004/03/01', 'yyyy/mm/dd');

2.7 DELETE
Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
DELETE FROM invoiceline 
WHERE invoiceid IN (SELECT invoiceid FROM invoice 
WHERE customerid IN (SELECT customerid FROM customer
WHERE firstname='Robert' AND lastname='Walter'));

DELETE FROM invoice 
WHERE customerid IN (SELECT customerid FROM customer
WHERE firstname='Robert' AND lastname='Walter');

DELETE FROM customer WHERE firstname = 'Robert' AND lastname = 'Walter';

3.0 SQL Functions
In this section you will be using the Oracle system functions, as well as your own functions, to perform various actions against the database

3.1 System Defined Functions
Task – Create a function that returns the current time.
SELECT LOCALTIMESTAMP FROM DUAL;

Task – create a function that returns the length of a mediatype from the mediatype table
SELECT LENGTH (OF NAME OF  MEDIATYPE) "Length in characters"
FROM DUAL;

3.2 System Defined Aggregate Functions
Task – Create a function that returns the average total of all invoices
SELECT AVG(total)
FROM invoice;

Task – Create a function that returns the most expensive track
SELECT MAX(unitprice) FROM track;

3.3 User Defined Scalar Functions
Task – Create a function that returns the average price of invoiceline items in the invoiceline table
SELECT AVG(unitprice) AS "AVG Invoice Line Item Price"
FROM invoiceline;

3.4 User Defined Table Valued Functions
Task – Create a function that returns all employees who are born after 1968.
CREATE or REPLACE
CREATE OR REPLACE FUNCTION get_employees ( date IN varchar2)
RETURN VARCHAR2 -- return type
IS 
-- we can define our own local variables
DECLARE 
CURSOR ;
BEGIN
    SELECT COUNT(pokemon_id) INTO number_pokemon FROM pokemon
        INNER JOIN pokemon_users ON (trainer = user_id)
        WHERE username = username_input;
    RETURN number_pokemon;
END;

4.0 Stored Procedures
 In this section you will be creating and executing stored procedures. You will be creating various types of stored procedures that take input and output parameters.
4.1 Basic Stored Procedure
Task – Create a stored procedure that selects the first and last names of all the employees.
CREATE PROCEDURE full_names
(first_name IN varchar2,
last_name IN varchar2)
IS
BEGIN
    SELECT lastname, firstname FROM employee;
END;

4.2 Stored Procedure Input Parameters
Task – Create a stored procedure that updates the personal information of an employee.
CREATE PROCEDURE update_information
(address_new IN varchar2,
city_new IN varchar2,
state_new IN varchar2,
country_new IN varchar2,
postaclcode_new IN varchar2,
phone_new IN varchar2,
fax_new IN varchar2,
email_new IN varchar2)
IS
BEGIN
INSERT INTO employee (Address, City, State, Country, PostalCode, Phone, Fax, Email)
    VALUES(address_new, city_new, state_new, Country, postaclcode_new, phone_new, fax_new, email_new);
END;

Task – Create a stored procedure that returns the managers of an employee.
CREATE PROCEDURE managers
(employeeid IN int)
IS
BEGIN
SELECT FirstName, LastName FROM employee
WHERE reportstoid = employeeid;

4.3 Stored Procedure Output Parameters
Task – Create a stored procedure that returns the name and company of a customer.
CREATE PROCEDURE company_name
(company_name IN varchar2,
first_name,
Last_name)
IS
BEGIN
SELECT * FROM customer cu WHERE firstname = first_name AND lastname = last_name AND company=company_name;
RETURNING cu.firstname, cu.lastname, cu.company;
END;

CREATE PROCEDURE

6.0 Triggers
In this section you will create various kinds of triggers that work when certain DML statements are executed on a table.
6.1 AFTER/FOR
Task - Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE TRIGGER after_insert
AFTER INSERT ON employee;

Task – Create an after update trigger on the album table that fires after a row is inserted in the table
CREATE TRIGGER after_update
AFTER UPDATE ON album;

Task – Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE TRIGGER after_delete
AFTER DELETE ON customer;

Task – Create a trigger that restricts the deletion of any invoice that is priced over 50 dollars.
CREATE TRIGGER limit_50
AFTER DELETE ON invoice
BEGIN
    IF invoice.total<50
        DELETE FROM invoice
    END IF;
END;

7.0 JOINS
In this section you will be working with combing various tables through the use of joins. You will work with outer, inner, right, left, cross, and self joins.

7.1 INNER
Task – Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
SELECT customer.firstname, customer.lastname, invoice.invoiceid FROM customer  INNER JOIN invoice 
ON (customer.customerid = invoice.customerid);

7.2 OUTER
Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
SELECT customer.customerid, customer.firstname, customer.lastname, invoice.invoiceid, invoice.total 
FROM customer  
FULL OUTER JOIN invoice 
ON (customer.customerid = invoice.customerid); 

7.3 RIGHT
Task – Create a right join that joins album and artist specifying artist name and title.
SELECT artist.name, album.title 
FROM album  
RIGHT JOIN artist 
ON (artist.name = album.title);

7.4 CROSS
Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT artist.name, album.title 
FROM album  
CROSS JOIN artist 
ORDER BY artist.name;


7.5 SELF
Task – Perform a self-join on the employee table, joining on the reportsto column.
select * FROM employee
LEFT JOIN employee
ON employee.reportsto;



